{"version":3,"sources":["components/move.jsx","components/board.jsx","index.js"],"names":["Moves","history","jumpTo","term","winner","style","winnerMsg","class","className","Dropdown","Toggle","variant","id","Menu","map","step","move","desc","Item","key","onClick","Square","value","size","width","height","lineHeight","clicked","type","Board","squares","rowSize","rowNum","blackIsNext","item","index","Game","props","handleClick","i","state","slice","stepNumber","length","setState","concat","calculateWinner","Array","fill","this","current","theme","Component","num","target","countStep","n","init","getStartPosition","startForward","startBack","find","credit","getResult","end","targetSquare","countCredit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d579c925.chunk.js","sourcesContent":["import React from \"react\";\nimport { Dropdown } from 'react-bootstrap';\n\nconst Moves = ({ history, jumpTo, term, winner }) => {\n  const style = term ? 'black' : 'white';\n  const winnerMsg = winner === 'X' ? 'Pacman win' : 'Ghost win';\n  return (\n    <div class='info'>\n      <h1 className='info-title'>\n        {winner ? winnerMsg : `Pac-Man Gobang!`}\n      </h1>\n\n      <Dropdown className={`${style} info-selection`}>\n        <Dropdown.Toggle\n          variant=\"secondary\" id=\"dropdown-basic\">\n          Next one is <span className='icon'></span>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          {\n            history.map((step, move) => {\n              const desc = move ? \"Go to move #\" + move : \"Go to game start\";\n              return (\n                <Dropdown.Item\n                  key={move}\n                  onClick={() => jumpTo(move)}>\n                  {desc}\n                </Dropdown.Item>\n              );\n            })\n          }\n        </Dropdown.Menu>\n      </Dropdown>\n    </div>\n  )\n}\n\nexport default Moves;","import React from \"react\";\n\nconst Square = ({ onClick, value, size }) => {\n  const style = {\n    width: size + 'px',\n    height: size + 'px',\n    lineHeight: size + 'px',\n  }\n  const clicked = value ? 'clicked' : '';\n  const type = value === 'X' ? 'black' : 'white';\n  return (\n    <button\n      className={`square ${clicked} ${value && type}`}\n      style={style}\n      onClick={onClick}\n    >\n    </button>\n  );\n}\n\nconst Board = ({ squares, rowSize, rowNum, onClick, blackIsNext }) => {\n  return (\n    <div className={`board-row ${blackIsNext ? 'black' : 'white'}`}\n      style={{ width: ((rowSize - 1) * rowNum) + 'px' }}>\n      {\n        squares.map((item, index) => (\n          <Square\n            key={index}\n            value={item}\n            size={rowSize}\n            onClick={() => onClick(index)}\n          />\n        ))\n      }\n    </div>\n  )\n}\n\nexport default Board;","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Moves from './components/move';\nimport Board from './components/board';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss';\n\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.rowNum = 15;\n    this.rowSize = 30;\n\n    this.state = {\n      history: [\n        {\n          squares: Array(this.rowNum * this.rowNum).fill(null)\n        }\n      ],\n      blackIsNext: true,\n      stepNumber: 0,\n      winner: null\n    };\n  }\n\n  handleClick = (i) => {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (this.state.winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.blackIsNext ? \"X\" : \"O\";\n    this.setState({\n      history: history.concat([{ squares: squares }]),\n      stepNumber: history.length,\n      blackIsNext: !this.state.blackIsNext,\n      winner: calculateWinner(squares, i, this.rowNum)\n    });\n  }\n\n  jumpTo = (step) => {\n    this.setState({\n      stepNumber: step,\n      blackIsNext: step % 2 === 0,\n      winner: null\n    });\n  }\n\n  render() {\n    const { stepNumber, winner, blackIsNext } = this.state;\n    const history = this.state.history;\n    const current = history[stepNumber];\n    const theme = winner && (winner === 'X' ? 'win win--black' : 'win win--white');\n\n    return (\n      <main className={`main ${theme}`}>\n        <Moves\n          term={blackIsNext}\n          history={history.slice(0, stepNumber)}\n          jumpTo={this.jumpTo}\n          winner={winner}\n        />\n        <div className=\"game\" >\n          <div className=\"game-board\">\n            <Board\n              rowSize={this.rowSize}\n              rowNum={this.rowNum}\n              squares={current.squares}\n              blackIsNext={blackIsNext}\n              onClick={i => this.handleClick(i)}\n            />\n          </div>\n        </div>\n      </main >\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares, i, num) {\n  const target = squares[i];\n\n  // => 初始查找位置\n  function getStartPosition(type) {\n    switch (type) {\n      case 'row':\n        return [1, -1];\n      case 'column':\n        return [num, num * -1];\n      case 'slash':\n        return [num - 1, (num - 1) * -1];\n      case 'backslash':\n        return [num + 1, (num + 1) * -1];\n    }\n  }\n\n  // => 計算查找步數\n  function countStep(n, init, type) {\n    const [startForward, startBack] = getStartPosition(type);\n    // 第一次查找，用初始值\n    if (n === 0) {\n      n = init ? startForward : startBack;\n      init = init ? !init : init;\n      return [n, init];\n    }\n\n    // 之後的查找位置，遞增或遞減初始值\n    n > 0 ? n += startForward : n += startBack;\n    return [n, init];\n  }\n\n  // => 查找該方向有多少同樣的棋子\n  function countCredit(type, init, n, credit, end) {\n    while (end < 2 && credit < 5) {\n      [n, init] = countStep(n, init, type);\n      const targetSquare = squares[i + n];\n\n      if (targetSquare && squares[i] === targetSquare) {\n        credit++;\n      } else {\n        end++;\n      }\n      // 碰到牆就往反方向找\n      if (end >= 1 && n >= 1) n = 0;\n    }\n\n    return credit;\n  }\n\n  // => 檢查結果\n  function getResult(credit) {\n    if (credit < 4) return null;\n    return (target === 'X') ? 'X' : 'O';\n  };\n\n  const direction = ['row', 'column', 'slash', 'backslash'];\n  const result = direction.find(type => (\n    getResult(countCredit(type, true, 0, 0, 0)))\n  );\n  return result ? target : null;\n}\n"],"sourceRoot":""}